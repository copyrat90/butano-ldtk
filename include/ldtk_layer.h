#pragma once

#include "ldtk_entity.h"
#include "ldtk_gen_ident_fwd.h"
#include "ldtk_gen_iid_fwd.h"
#include "ldtk_int_grid_base.h"
#include "ldtk_layer_type.h"
#include "ldtk_tile_grid_base.h"

#include <bn_span.h>

#include <algorithm>

namespace ldtk
{

class layer
{
public:
    constexpr layer(int c_height, int c_width, int grid_size, gen::ident identifier, int px_total_offset_x,
                    int px_total_offset_y, layer_type type, const tile_grid_base* auto_layer_tiles,
                    const bn::span<const entity>& entity_instances, const tile_grid_base* grid_tiles, gen::iid iid,
                    const int_grid_base* int_grid, bool visible)
        : _c_height(c_height), _c_width(c_width), _grid_size(grid_size), _identifier(identifier),
          _px_total_offset_x(px_total_offset_x), _px_total_offset_y(px_total_offset_y), _type(type),
          _auto_layer_tiles(auto_layer_tiles), _entity_instances(entity_instances), _grid_tiles(grid_tiles), _iid(iid),
          _int_grid(int_grid), _visible(visible)
    {
    }

public:
    /// @brief Linear searches an entity.
    /// @param iid Instance id of the entity to search for.
    /// @return Pointer to the found entity, or `nullptr` if it doesn't exist.
    [[nodiscard]] constexpr auto find_entity(gen::iid iid) const -> const entity*
    {
        auto iter = std::ranges::find_if(_entity_instances, [iid](const entity& et) { return et.iid() == iid; });

        if (iter == _entity_instances.end())
            return nullptr;

        return &*iter;
    }

public:
    /// @brief Grid-based height
    [[nodiscard]] constexpr auto c_height() const -> int
    {
        return _c_height;
    }

    /// @brief Grid-based width
    [[nodiscard]] constexpr auto c_width() const -> int
    {
        return _c_width;
    }

    /// @brief Grid size
    [[nodiscard]] constexpr auto grid_size() const -> int
    {
        return _grid_size;
    }

    /// @brief Layer definition identifier
    [[nodiscard]] constexpr auto identifier() const -> gen::ident
    {
        return _identifier;
    }

    /// @brief Total layer X pixel offset, including both instance and definition offsets.
    [[nodiscard]] constexpr auto px_total_offset_x() const -> int
    {
        return _px_total_offset_x;
    }

    /// @brief Total layer Y pixel offset, including both instance and definition offsets.
    [[nodiscard]] constexpr auto px_total_offset_y() const -> int
    {
        return _px_total_offset_y;
    }

    /// @brief Layer type
    [[nodiscard]] constexpr auto type() const -> layer_type
    {
        return _type;
    }

    /// @brief (Only *Auto-layers*) An array containing all tiles generated by Auto-layer rules.
    /// The array is already sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).
    /// @note if multiple tiles are stacked in the same cell as the result of different rules,
    /// all tiles behind opaque ones will be discarded.
    [[nodiscard]] constexpr auto auto_layer_tiles() const -> const tile_grid_base*
    {
        return _auto_layer_tiles;
    }

    /// @brief (Only *Entity layers*)
    [[nodiscard]] constexpr auto entity_instances() const -> const bn::span<const entity>&
    {
        return _entity_instances;
    }

    /// @brief (Only *Tile layers*)
    [[nodiscard]] constexpr auto grid_tiles() const -> const tile_grid_base*
    {
        return _grid_tiles;
    }

    /// @brief Unique project identifier
    [[nodiscard]] constexpr auto iid() const -> gen::iid
    {
        return _iid;
    }

    /// @brief (Only *IntGrid layers*) A list of all values in the IntGrid layer. \n
    /// 0 means "empty cell" and IntGrid values start at 1. \n
    /// The size is `c_width()` x `c_height()` cells.
    [[nodiscard]] constexpr auto int_grid() const -> const int_grid_base*
    {
        return _int_grid;
    }

    /// @brief Layer instance visibility
    [[nodiscard]] constexpr auto visible() const -> bool
    {
        return _visible;
    }

private:
    int _c_height;
    int _c_width;

    int _grid_size;

    gen::ident _identifier;

    int _px_total_offset_x;
    int _px_total_offset_y;

    /* TODO: tileset */

    layer_type _type;

    const tile_grid_base* _auto_layer_tiles;
    bn::span<const entity> _entity_instances;
    const tile_grid_base* _grid_tiles;
    gen::iid _iid;
    const int_grid_base* _int_grid;

    bool _visible;
};

} // namespace ldtk
